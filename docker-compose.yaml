services:
  ops-db:
    image: registry.cn-hangzhou.aliyuncs.com/veops/mysql:8.2.0
    container_name: ops-db
    env_file:
       - .env
    environment:
      TZ: Asia/Shanghai
    volumes:
      - db-data:/var/lib/mysql
      - ./docs/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
      - ./docs/create-users.sql:/docker-entrypoint-initdb.d/1-create-users.sql
      - ./docs/ops.sql:/docker-entrypoint-initdb.d/ops.sql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      new:
        aliases:
          - mysql
    ports:
      - '63306:3306'

  ops-cache:
    image: registry.cn-hangzhou.aliyuncs.com/veops/redis:7.2.3
    container_name: ops-cache
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis-data:/data
    healthcheck:
      interval: 10s
      test: ["CMD", "redis-cli", "ping"]
    networks:
      new:
        aliases:
          - redis

  cmdb-api:
    image: registry.cn-hangzhou.aliyuncs.com/veops/cmdb-api:2.5.2
    container_name: cmdb-api-ops
    env_file:
      - .env
    volumes:
      - ./docs/.env:/data/apps/cmdb/.env
      - ./docs/app.py:/data/apps/cmdb/api/lib/perm/acl/app.py
    environment:
      TZ: Asia/Shanghai
      WAIT_HOSTS: ops-db:3306, ops-cache:6379
    depends_on:
      ops-db:
        condition: service_healthy
      ops-cache:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        sed -i "s#USE_ACL = False#USE_ACL = True#g" settings.py
        /wait
        flask db-setup
        flask common-check-new-columns
        gunicorn --workers=4 autoapp:app -b 0.0.0.0:5000 -D
        
        celery -A celery_worker.celery worker -E -Q one_cmdb_async --autoscale=4,1 --logfile=one_cmdb_async.log -D
        celery -A celery_worker.celery worker -E -Q acl_async --logfile=one_acl_async.log --autoscale=2,1 -D
        
        nohup flask cmdb-trigger > trigger.log 2>&1 &
        flask cmdb-init-cache
        flask cmdb-init-acl
        flask init-import-user-from-acl
        flask init-department
        nohup flask cmdb-patch -v 2.4.17 &
        flask cmdb-counter > counter.log 2>&1
    networks:
      new:
        aliases:
          - cmdb-api
    healthcheck:
      timeout: 3s
      interval: 5s
      retries: 10
      test: "ps aux|grep -v grep|grep -v '1 root'|grep gunicorn || exit 1"

  oneterm-api:
    image: registry.cn-hangzhou.aliyuncs.com/veops/oneterm-api:v25.5.1-fix
    container_name: oneterm-api-ops
    env_file:
      - .env
    volumes:
      - file-data:/replay
      - ./docs/api.yaml:/oneterm/config.yaml
    depends_on:
      ops-db:
        condition: service_healthy
      ops-cache:
        condition: service_healthy
      oneterm-guacd:
        condition: service_healthy
      cmdb-api:
        condition: service_healthy
    command:
      - "./server"
      - "config.yaml"
    healthcheck:
      test: "nc -z 127.0.0.1 8080 || exit 1"
      interval: 5s
      timeout: 3s
      retries: 10
    restart: always
    networks:
      new:
        aliases:
          - oneterm-api

  ops-ui:
    image: registry.cn-hangzhou.aliyuncs.com/veops/ops-ui:25.5.1
    container_name: ops-ui
    depends_on:
      cmdb-api:
        condition: service_healthy
      oneterm-api:
        condition: service_healthy
    environment:
      TZ: Asia/Shanghai
      ONETERM_API_HOST: oneterm-api:8080
      CMDB_API_HOST: cmdb-api:5000
      NGINX_PORT: 80
    volumes:
      - ./docs/nginx.cmdb.conf.example:/etc/nginx/conf.d/nginx.oneterm.conf.example
    restart: always
    command:
      - /bin/sh
      - -c
      - |
        envsubst '$$ONETERM_API_HOST  $$CMDB_API_HOST $$NGINX_PORT' < /etc/nginx/conf.d/nginx.oneterm.conf.example > /etc/nginx/conf.d/oneterm.conf
        nginx -g  'daemon off;'
    networks:
      - new
    ports:
      - "8080:80"

  oneterm-guacd:
    image: registry.cn-hangzhou.aliyuncs.com/veops/oneterm-guacd:1.5.4
    container_name: oneterm-guacd
    restart: always
    user: root
    volumes:
      - file-data:/replay
    networks:
      new:
        aliases:
          - oneterm-guacd
    healthcheck:
      test: "nc -z 127.0.0.1 4822 || exit 1"
      interval: 5s

volumes:
  db-data:
    driver: local
    name: cmdb_db-ops
  file-data:
    driver: local
    name: oneterm_file-ops
  ssh-data:
    driver: local
    name: oneterm_ssh-ops
  redis-data:
    driver: local
    name: redis-data-ops


networks:
  new:
    driver: bridge
    name: ops_network
    ipam:
      config:
        - subnet: 172.36.0.0/24
